/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Button } from '@mui/material';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';

const TypeQuest = styled('div')(({ theme }) => ({
  backgroundColor: `rgba(250, 250, 250, 1)`,
  boxShadow: `0px 4px 8px rgba(0, 0, 0, 0.16)`,
  borderRadius: `8px`,
  display: `grid`,
  position: `relative`,
  isolation: `isolate`,
  width: `100%`,
  padding: `0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: `auto`,
  gridTemplateColumns: `repeat(auto-fit, minmax(390px, 1fr))`,
  columnGap: `10px`,
  rowGap: `10px`,
}));

const TestFrame = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: `478px`,
  width: `390px`,
  margin: `0px`,
});

const ImageFrame = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  width: `390px`,
  left: `0px`,
  top: `0px`,
});

const Image1 = styled('div', {
  shouldForwardProp: (prop) => !['props'].includes(prop.toString()),
})(({ props }) => ({
  backgroundPosition: `center`,
  backgroundSize: `cover`,
  backgroundRepeat: `no-repeat`,
  borderRadius: `6px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  alignSelf: `stretch`,
  height: `251px`,
  margin: `0px`,
  backgroundImage: props.posts[index].image,
}));

const Content = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `absolute`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px 20px 35px 20px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  width: `390px`,
  left: `0px`,
  top: `271px`,
});

const Details = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const TitleTop = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `space-between`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Title = animated(
  styled('div')(({ theme }) => ({
    textAlign: `left`,
    whiteSpace: `pre-wrap`,
    fontSynthesis: `none`,
    color: theme.palette['Text']['Primary'],
    fontStyle: `normal`,
    fontFamily: `Heebo`,
    fontWeight: `700`,
    fontSize: `38px`,
    letterSpacing: `0px`,
    textDecoration: `underline`,
    textTransform: `none`,
    margin: `0px`,
  }))
);

const Q3Dots = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `4px`,
  height: `20px`,
  margin: `0px`,
});

const Rectangle1 = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Text']['Primary'],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `0px`,
}));

const Rectangle2 = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Text']['Primary'],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `8px`,
}));

const Rectangle3 = styled('div')(({ theme }) => ({
  backgroundColor: theme.palette['Text']['Primary'],
  borderRadius: `10px`,
  width: `4px`,
  height: `4px`,
  position: `absolute`,
  left: `0px`,
  top: `16px`,
}));

const Details1 = styled('div')(({ theme }) => ({
  textAlign: `left`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle: `normal`,
  fontFamily: `Heebo`,
  fontWeight: `400`,
  fontSize: `16px`,
  letterSpacing: `0.15000000596046448px`,
  textDecoration: `none`,
  lineHeight: `150%`,
  textTransform: `none`,
  alignSelf: `stretch`,
  margin: `8px 0px 0px 0px`,
}));

const ButtonContained = styled(Button)({
  margin: `8px 0px 0px 0px`,
});

function Card19(props) {
  const [TitleSpring, TitleApi] = useSpring(() => ({
    config: {
      duration: 750,
      easing: easings['easeInOutExpo'],
    },
    delay: 0,
    from: { transform: 'translateX(0px)', opacity: 1 },
  }));
  return (
    <TypeQuest className={props.className}>
      {props.posts &&
        props.posts.map((post, index) => {
          return (
            <TestFrame key={index}>
              <ImageFrame>
                <Image1 props={props}></Image1>
              </ImageFrame>
              <Content>
                <Details>
                  <TitleTop>
                    <Title
                      onClick={() => {
                        TitleApi.start({
                          ...{ transform: 'translateX(-100px)', opacity: 0 },
                          delay: 0,
                        });
                      }}
                      style={{ ...TitleSpring }}
                    >
                      {props.posts[index].title}
                    </Title>
                    <Q3Dots>
                      <Rectangle1></Rectangle1>
                      <Rectangle2></Rectangle2>
                      <Rectangle3></Rectangle3>
                    </Q3Dots>
                  </TitleTop>
                  <Details1>{props.posts[index].content}</Details1>
                  <ButtonContained
                    variant="contained"
                    size="large"
                    color="primary"
                  >
                    {' '}
                    BOOK ME{' '}
                  </ButtonContained>
                </Details>
              </Content>
            </TestFrame>
          );
        })}
    </TypeQuest>
  );
}

export default Card19;
